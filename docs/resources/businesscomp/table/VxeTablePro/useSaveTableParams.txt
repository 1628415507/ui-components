/*
 * @Description:
 * @Date: 2024-07-09 15:03:25
 * @LastEditTime: 2025-06-06 13:15:05
 */
// import { useRoute } from 'vue-router'
import { onUnmounted, ref } from 'vue'
import Sortable from 'sortablejs'
// import request from '../../utils/request'

// import { useI18n } from 'vue-i18n'

// 保存表格配置
const saveApi = ({ tableId, columnConfig, name }) => {
  const pathname = window.location?.hash?.substring(1)
  // const encodedUrl = MD5(pathname).toString()
  // encodeURIComponent(pathname)
  // console.log('【 encodedUrl 】-16', encodedUrl)
  request({
    url: '/ilp-system-service/layout/persist',
    method: 'post',
    data: {
      content: JSON.stringify({ layout: columnConfig }),
      name,
      pathname,
      tableId: tableId,
      version: new Date().getTime()
    }
  })
}

// 获取表格配置
const getColumnsData = async (tableId) => {
  if (!tableId.length) {
    return []
  }
  try {
    const tableName = tableId
    const route = {}//useRoute()
    const res = {}
    // await request({
    //   url: `/ilp-system-service/layout/list/${tableName}`,
    //   method: 'get',
    //   params: {
    //     unique: new Date().getTime(),
    //     pathname: route.path
    //   }
    // })
    // const res = []
    const data = res?.find((item) => item.name == 'Test') // TODO
    const _res = data?.content ? JSON.parse(data.content) : {}
    return _res.layout || []
  } catch (error) {
    return {}
  }
}
// 判断数据类型
function isDataType(data, type) {
  if (type === 'array') {
    return Object.prototype.toString.call(data) === '[object Array]'
  } else if (type === 'object') {
    return Object.prototype.toString.call(data) === '[object Object]'
  }
}
// 计算字符串的个数
function getStrNum(str = '') {
  let num = 0
  for (let i = 0; i < str?.length; i++) {
    let a = str.charAt(i)
    if (a.match(/[^\x00-\xff]/gi) != null) {
      num += 1
    } else {
      num += 0.5
    }
  }
  return num
}

export default function useSaveTableParams() {
  // const $t = useI18n().t
  const specialColumn = ['seq', 'checkbox', 'expand']
  const baseColumns = ref({})

  // 右键菜单
  const menuConfig = ref({
    header: {
      options: [
        [
          { code: 'hideColumn', name: '隐藏列', disabled: false },
          { code: 'showAllColumn', name: '取消所有隐藏列', disabled: false }
          // { code: 'defaultLayout', name: '默认布局', disabled: false }
          // { code: 'columnWidthAuto', name: $t('vxeTable.ColumnWidthAuto'), disabled: false }
        ]
      ]
    },
    visibleMethod(params) {
      const { options, column, $table } = params
      const isDisabled = !column
      options.forEach((list) => {
        list.forEach((item) => {
          item.disabled = isDisabled
          if (item.code == 'hideColumn') {
            if (
              specialColumn.includes(column.type) ||
              column.fixed ||
              (column?.params && column.params?.isRequire) ||
              ($table.props?.editRules &&
                $table.props.editRules[column.field] &&
                $table.props.editRules[column.field][0].required)
            ) {
              item.disabled = true
            } else {
              item.disabled = false
            }
          }
        })
      })
      return true
    },
    menuClickEvent(context) {
      const { menu, column, $table } = context
      const { fullColumn } = $table.getTableColumn()

      if (!$table) {
        return
      }
      switch (menu.code) {
        case 'hideColumn':
          $table.hideColumn(column)
          saveTableConfig($table)
          break
        case 'showAllColumn':
          fullColumn
            .filter((col) => !col.visible)
            .forEach((col) => {
              $table.showColumn(col)
            })
          // $table.resetColumn(true)
          saveTableConfig($table)
          break
        case 'columnWidthAuto':
          let tableData = $table.getTableData().fullData
          fullColumn
            .filter((col) => col.visible)
            .forEach((col) => {
              if (!specialColumn.includes(col.type)) {
                let len = getStrNum(col.title) * 20 || 0
                tableData.forEach((item) => {
                  const value = item[col.field] || ''
                  let num = getStrNum(value)
                  const fieldW = num * 15 || 0
                  if (fieldW > len) {
                    len = fieldW
                  }
                })
                if (col.sortable) {
                  len += 60
                }
                col.width = len.toFixed(0) + 'px'
                // console.log('【  col.width 】-121', col.title, len, col.width, col)
                // col.resizeWidth = 'auto'
                // col.renderWidth = 'auto'
              }
            })
          $table.reloadColumn(fullColumn)
          setTimeout(() => {
            saveTableConfig($table)
          }, 0)
          break
        case 'defaultLayout': //默认布局
          const oldColumns = baseColumns.value[$table.props.id]
          // const refreshColumns = oldColumns.map((col) => fullColumn.find((ele) => ele.title === col.title))
          // console.log('【 refreshColumns 】-174', oldColumns, refreshColumns)
          // $table.reloadColumn(refreshColumns)
          $table.reloadColumn(oldColumns)
          break
      }
    }
  })

  // 表格属性-禁用列显示隐藏的勾选
  const customConfig = ($table) => {
    return {
      checkMethod: ({ column }) => {
        if (specialColumn.includes(column.type)) {
          return false
        }
        if ($table?.editRules && $table?.editRules[column.field] && $table.editRules[column.field][0].required) {
          return false
        }
        if (column?.params?.isRequire) {
          return false
        }
        return true
      }
    }
  }

  // 列的宽度变化方法
  const resizableChange = ({ $table, column }) => {
    saveTableConfig($table)
  }

  // toolbar操作后方法
  const toolbarCustomEvent = ({ $table, type }) => {
    if ($table) {
      const { fullColumn } = $table.getTableColumn()
      // setColumnFixed 设置指定 固定列
      // clearColumnFixed 取消指定 固定列
      // hideColumn 隐藏 指定列
      // showColumn 显示 指定列
      // setColumnWidth 设置 宽
      // getColumnWidth 获取 宽
      switch (type) {
        case 'confirm': {
          saveTableConfig($table)
          break
        }
        case 'reset': {
          const oldColumns = baseColumns.value[$table.props.id]
          const refreshColumns = oldColumns.map((col) => fullColumn.find((ele) => ele.title === col.title))
          $table.reloadColumn(refreshColumns)
          saveTableConfig($table, 'reset')
          break
        }
        case 'close': {
          break
        }
      }
    }
  }

  // 针对于树形表格，列合并
  const colspanMethod = ({ row, columnIndex, _rowIndex, $table }) => {
    const { tableColumn } = $table.getTableColumn()
    const columns = tableColumn.filter((column) => !column.type)
    if (!(columns.length > 0)) {
      return { rowspan: 1, colspan: 1 }
    }
    const index = $table.getColumnIndex(columns[0])
    if (row?.hasChild || (row?.children && row.children.length > 0)) {
      if (columnIndex < index) {
        return { rowspan: 1, colspan: 1 }
      } else if (columnIndex === index) {
        return { rowspan: 1, colspan: columns.length }
      } else {
        return { rowspan: 0, colspan: 0 }
      }
    } else {
      return { rowspan: 1, colspan: 1 }
    }
  }
  // 列拖拽
  const columnDrop = ($table) => {
    Sortable.create($table.$el.querySelector('.body--wrapper>.vxe-table--header .vxe-header--row'), {
      handle: '.vxe-header--column:not(.col--fixed)',
      onMove: (evt, origEvt) => {
        // 固定列不允许停靠
        if (evt.related.className.indexOf('col--fixed') > -1) {
          return false
        }
      },
      onEnd: (sortableEvent) => {
        const newIndex = sortableEvent.newIndex
        const oldIndex = sortableEvent.oldIndex
        // fullColumn: 全量表头列   tableColumn: 当前渲染中的表头列
        const { fullColumn, tableColumn } = $table.getTableColumn()
        // 获取列索引 columnIndex > fullColumn
        const oldColumnIndex = $table.getColumnIndex(tableColumn[oldIndex])
        const newColumnIndex = $table.getColumnIndex(tableColumn[newIndex])
        // 移动到目标列
        const currRow = fullColumn.splice(oldColumnIndex, 1)[0]
        fullColumn.splice(newColumnIndex, 0, currRow)
        $table.loadColumn(fullColumn)

        saveTableConfig($table)
      }
    })
  }

  // 链接toolbar工具栏
  const connectToolbar = ($table, $toolbar) => {
    if ($table && $toolbar) {
      $table.connect($toolbar)
    }
  }

  // 设置表格列的各项参数
  const setTableParams = (tableRef, columns) => {
    getBaseColumns(tableRef)
    columnDrop(tableRef)
    const { fullColumn } = tableRef.getTableColumn()

    fullColumn.sort((a, b) => {
      const indexA = columns?.find((item) => item.title === a.title)?.index || 0
      const indexB = columns?.find((item) => item.title === b.title)?.index || 0
      return indexA - indexB
    })

    columns.forEach((column) => {
      const col = column.field
        ? fullColumn.find((col) => col.field === column.field)
        : fullColumn.find((col) => col.type === column.title)

      if (column.fixed) {
        tableRef.setColumnFixed(col, column.fixed)
      }

      if (col && column.width && column.width !== '0') {
        col.resizeWidth = column.width
        col.renderWidth = column.width
      }

      if (!column.visible) {
        tableRef.hideColumn(col)
      }
    })

    tableRef.reloadColumn(fullColumn)
  }

  // 初始化
  const initTableConfig = async (tableRefs, toolbars) => {
    if (!tableRefs) return
    const tableIds = getTableId(tableRefs)
    console.log('【 tableIds 】-354', tableIds)
    const columnsConfig = await getColumnsData(tableIds) // 获取数据
    console.log('【 columnsConfig 】-321', columnsConfig)
    // 数组类型
    // if (isDataType(tableRefs, 'array') && isDataType(toolbars, 'array')) {
    //   tableRefs.forEach(($table, i) => {
    //     const tableColumns = columnsConfig[$table.id] || []
    //     connectToolbar($table, toolbars[i])
    //     tableColumns && setTableParams($table, tableColumns)
    //   })
    // } else
    // 对象类型
    if (isDataType(tableRefs, 'object') && isDataType(toolbars, 'object')) {
      connectToolbar(tableRefs, toolbars)
      columnsConfig && setTableParams(tableRefs, columnsConfig)
    }
  }

  const getTableId = (tableRefs) => {
    const ids = []
    if (isDataType(tableRefs, 'array')) {
      tableRefs.forEach(($table) => {
        ids.push($table.id)
      })
    } else if (isDataType(tableRefs, 'object')) {
      ids.push(tableRefs.id)
    }

    return ids
  }

  const getBaseColumns = ($table) => {
    const columns = $table.getTableColumn()
    const fullColumn = JSON.parse(JSON.stringify(columns.fullColumn))
    baseColumns.value[$table.id] = fullColumn
  }

  const saveTableConfig = ($table, type = 'default') => {
    const tableId = $table?.id || $table.props.id
    const { fullColumn } = $table.getTableColumn()
    let columnConfig = []

    if (type === 'default') {
      columnConfig = fullColumn.map((column) => {
        const index = fullColumn.findIndex((col) => col.title === column.title)
        return {
          field: column.field,
          title: column.title || column.type,
          width: column.resizeWidth || column.renderWidth,
          fixed: column.fixed || '',
          visible: column.visible,
          index
        }
      })
    } else {
      columnConfig = []
    }
    saveApi({
      tableId,
      columnConfig,
      name: 'Test' // TODO
    })
  }

  onUnmounted(() => {
    baseColumns.value = {}
  })
  const setColumnFilterOptions = ($table, tableData, totalRowProp) => {
    const { tableColumn } = $table.getTableColumn()
    nextTick(() => {
      tableColumn.forEach((col) => {
        const options = []

        if (tableData.length > 0) {
          tableData.forEach((row, index) => {
            let val = row[col.field]
            if (col.formatter) {
              val = col.formatter({ cellValue: row[col.field] })
            }
            const IsExist = options.some((item) => item?.label === val)
            if (!IsExist) {
              if (row[col.field]) {
                const option = {
                  label: val,
                  value: row[col.field],
                  checked: false
                }
                options.push(option)
              }
            }
          })
        }
        $table.setFilter(col, options)
      })
      $table.updateData()
    })
  }
  return {
    initTableConfig,
    resizableChange,
    toolbarCustomEvent,
    colspanMethod,
    customConfig,
    menuConfig,
    setColumnFilterOptions
  }
}
